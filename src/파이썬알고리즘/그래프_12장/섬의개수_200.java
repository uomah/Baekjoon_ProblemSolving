package 파이썬알고리즘.그래프_12장;


import java.util.*;

public class 섬의개수_200 {
    public static void main(String[] args) {
        char[][] grid =
        {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
            {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
            {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
            {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
            {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
        System.out.println(numIslands(grid));

    }

    static final char ISLAND = '1', WATER = '0';
    static final int[] dr = {1, -1, 0, 0};
    static final int[] dc = {0, 0, -1, 1};
    static int row, col , result;
    static char[][] map;
    public static int numIslands(char[][] grid) {

        row = grid.length;
        col = grid[0].length;
        result = 0;
        map = grid;
        for(int i=0 ;i<row; i++){
            for(int j=0; j<col; j++){
                if(map[i][j] == ISLAND){
                    bfs(i,j);
                }
            }
        }
        return result;
    }

    public static void bfs(int r, int c){
        Queue<int[]> queue = new ArrayDeque<>();
        queue.add(new int[]{r, c});
        while(!queue.isEmpty()){
            int[] tmp = queue.poll();
            int curRow = tmp[0];
            int curCol = tmp[1];
            map[curRow][curCol] = WATER;
            for(int i = 0; i< 4; i++){
                if(rowInRange(curRow + dr[i])
                        && colInRange(curCol+dc[i])
                        && map[curRow + dr[i]][curCol+dc[i]] == ISLAND){
                    queue.add(new int[]{curRow + dr[i], curCol+dc[i]});
                }
            }
        }
        result++;
    }

    public static boolean rowInRange(int r){
        return (r < row && r >= 0);
    }

    public static boolean colInRange(int c){
        return (c < col && c >= 0);
    }
}
